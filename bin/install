#!/usr/bin/env bash

install_swift() {
  local version="$1"
  local install_path="$2"

#  while IFS='.' read -ra SEMVER; do
#    major=${SEMVER[0]}
#    minor=${SEMVER[1]}
#  done <<< $(cat /etc/*-release)

  local platform
  local major
  local minor
  case "$OSTYPE" in
    linux*) 
      platform=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
      echo "platform: ${platform}"
      minor=$(grep -oP '(?<=^VERSION_ID=\"..\.).+' /etc/os-release | tr -d '"')
      echo "minor: ${minor}"
      major=$(grep -oP '(?<=^VERSION_ID=\").+' /etc/os-release | tr -d ".${minor}\"")
      echo "major: ${major}"
      ;;
    *) 
      fail "Unsupported platform" 
      ;;
  esac

  # https://download.swift.org/swift-5.5.2-release/ubuntu1604/swift-5.5.2-RELEASE/swift-5.5.2-RELEASE-ubuntu16.04.tar.gz  
  local download_url="https://swift.org/builds/swift-${version}-release/${platform}${major}${minor}/swift-${version}-RELEASE/swift-${version}-RELEASE-${platform}${major}.${minor}.tar.gz"
  local tmp_dir="$(mktemp -d -t asdf-swift.XXX)"
  local source_path="${tmp_dir}/swift.tar.gz"

 (
    echo "âˆ— Downloading and installing swift ${version} for ${platform} ${major}.${minor}"
    curl --silent --fail --location --create-dirs --output "$source_path" "$download_url" || fail "Could not download Swift $version for architecture $architecture"
    tar zxf "$source_path" -C "$tmp_dir" --strip-components=1
    mv "${tmp_dir}/usr/*" "${install_path}"
    echo "The installation was successful!"
  ) || (
    rm -rf "$install_path"
    fail "An error occurred"
  )
  echo "Cleaning up"
  rm -rf "$tmp_dir"
}

install_swift $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
